//--------------------------------------------------------------------------------------
// Copyright 2014 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------

// Modified code from Fast Fourier Transform for Image Processing in DirectX 11 Jospeh S.

#define LENGTH 256
#define BUTTERFLY_COUNT 8
#define PI 3.1415926
//#define THREADGROUP_SIZE 256

void GetButterflyValues(uint passIndex,uint x, out uint2 indices, out float2 weights)
{
	int sectionWidth=2<<passIndex;
	int halfSectionWidth=sectionWidth/2;
	
	int sectionStartOffset=x&~(sectionWidth-1);
	int halfSectionOffset=x&(halfSectionWidth-1);
	int sectionOffset=x&(sectionWidth-1);
	
	sincos(2.0*PI*sectionOffset/(float)sectionWidth,weights.y,weights.x);
	weights.y=-weights.y;
	
	indices.x=sectionStartOffset+halfSectionOffset;
	indices.y=sectionStartOffset+halfSectionOffset+halfSectionWidth;
	
	if (passIndex==0)
	{
		indices=reversebits(indices)>>(32-BUTTERFLY_COUNT)&(LENGTH-1);
	}
}
/////////////////
groupshared float3 pingPongArray[4][THREADGROUP_SIZE];

void ButterflyPass(int passIndex, uint x,uint t0, uint t1, out float3 resultR, out float3 resultI)
{
	uint2 Indices;
	float2 Weights;
	
	GetButterflyValues(passIndex,x,Indices,Weights);
	
	float3 inputR1=pingPongArray[t0][Indices.x];
	float3 inputI1=pingPongArray[t1][Indices.x];
	
	float3 inputR2=pingPongArray[t0][Indices.y];
	float3 inputI2=pingPongArray[t1][Indices.y];
	
	resultR=(inputR1+Weights.x*inputR2+Weights.y*inputI2)*0.5;
	resultI=(inputI1-Weights.y*inputR2+Weights.x*inputI2)*0.5;
}

void ButterflyPassFinalNoI(int passIndex,int x,int t0,int t1, out float3 resultR)
{
	uint2 Indices;
	float2 Weights;
	GetButterflyValues(passIndex,x,Indices,Weights);
	
	float3 inputR1=pingPongArray[t0][Indices.x];
	
	float3 inputR2=pingPongArray[t0][Indices.y];
	float3 inputI2=pingPongArray[t1][Indices.y];
	
	resultR=(inputR1+Weights.x*inputR2+Weights.y*inputI2)*0.5;
	
}
